name: Update Sprint Dates

on:
  schedule:
    - cron: '*/10 * * * *'  # 10분마다 자동 실행
  workflow_dispatch:        # 수동 실행도 가능

jobs:
  update-dates:
    runs-on: ubuntu-latest

    steps:
      - name: Update Sprint Dates in GitHub Project
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const projectNumber = 5;
            const org = "20250123-SSG";
            const statusFieldName = "Status";
            const startDateField = "Start Date";
            const endDateField = "End Date";

            // 오늘 날짜를 한국 시간대(KST)로 가져오기
            const todayInKST = new Date();
            const formatter = new Intl.DateTimeFormat('fr-CA', {
                year: 'numeric',
                month: '2-digit',
                day: '2-digit',
                timeZone: 'Asia/Seoul' // 한국 시간대 지정
            });
            const today = formatter.format(todayInKST).replace(/\//g, '-'); // "YYYY-MM-DD" 형식으로 변환

            console.log(`오늘은 한국 시간으로 ${today} 입니다.`);

            const gql = String.raw;

            // 1. Get project ID and fields
            const queryProject = gql`
              query($org: String!) {
                organization(login: $org) {
                  projectV2(number: ${projectNumber}) {
                    id
                    fields(first: 20) {
                      nodes {
                        # 'ProjectV2FieldCommon' 대신, ProjectV2FieldConfiguration 유니온의 가능한 멤버들을 명시합니다.
                        # ProjectV2FieldCommon은 ProjectV2Field, ProjectV2IterationField 등에 포함될 수 있습니다.
                        ... on ProjectV2Field {
                          id
                          name
                          dataType
                        }
                        ... on ProjectV2IterationField {
                          id
                          name
                          dataType
                          # Iteration 필드는 추가적인 구성 정보를 가질 수 있습니다.
                          configuration {
                            iterations {
                              id
                              startDate
                              duration
                              title
                            }
                          }
                        }
                        ... on ProjectV2SingleSelectField {
                          id
                          name
                          dataType
                          options {
                            id
                            name
                          }
                        }
                        # 만약 프로젝트에 숫자(Number) 필드가 있다면, 아래도 추가할 수 있습니다.
                        # ... on ProjectV2NumberField {
                        #   id
                        #   name
                        #   dataType
                        # }
                        # GitHub ProjectV2에 String 필드(텍스트 필드)가 있다면 아래도 추가할 수 있습니다.
                        # ... on ProjectV2FieldCommon { # 이 타입은 다른 특정 타입들이 아닐 때의 공통 속성 조회용
                        #   id
                        #   name
                        # }
                      }
                    }
                    items(first: 100) {
                      nodes {
                        id
                        fieldValues(first: 20) {
                          nodes {
                            # 날짜 필드 값
                            ... on ProjectV2ItemFieldDateValue {
                              date
                              field {
                                name
                                # 필드 ID도 함께 가져오면 디버깅에 유용합니다.
                                # 여기서도 필드 타입별로 명시적으로 선택할 수 있습니다.
                                ... on ProjectV2Field { id }
                                ... on ProjectV2IterationField { id }
                                ... on ProjectV2SingleSelectField { id }
                              }
                            }
                            # 단일 선택 필드 값
                            ... on ProjectV2ItemFieldSingleSelectValue {
                              name
                              field {
                                name
                                ... on ProjectV2Field { id }
                                ... on ProjectV2SingleSelectField { id }
                              }
                            }
                            # 텍스트 필드 값
                            ... on ProjectV2ItemFieldTextValue {
                                text
                                field {
                                    name
                                    ... on ProjectV2Field { id }
                                }
                            }
                            # 숫자 필드 값 (있다면)
                            # ... on ProjectV2ItemFieldNumberValue {
                            #   number
                            #   field {
                            #     name
                            #     ... on ProjectV2Field { id }
                            #   }
                            # }
                          }
                        }
                        content {
                          ... on Issue {
                            number
                            title
                            state
                          }
                          # 만약 Project에 Pull Request도 포함된다면 아래를 추가해야 합니다.
                          # ... on PullRequest {
                          #   number
                          #   title
                          #   state
                          # }
                        }
                        # Status 필드 값을 직접 가져오는 부분은 유지 (이 부분이 안정적입니다)
                        status: fieldValueByName(name: "${statusFieldName}") {
                          ... on ProjectV2ItemFieldSingleSelectValue {
                            name
                          }
                        }
                      }
                    }
                  }
                }
              }
            `;

            const result = await github.graphql(queryProject, { org });
            const project = result.organization.projectV2;
            const projectId = project.id;
            const fields = project.fields.nodes;
            const items = project.items.nodes;

            const startField = fields.find(f => f.name === startDateField);
            const endField = fields.find(f => f.name === endDateField);

            if (!startField || !endField) {
              // 오류 메시지를 더 구체적으로 변경
              throw new Error(`필드 '${startDateField}' 또는 '${endDateField}'를 찾을 수 없습니다. 프로젝트 설정의 필드 이름을 다시 확인해주세요.`);
            }

            for (const item of items) {
              if (!item.content || !item.content.number) continue;

              const issueNumber = item.content.number;
              const status = item.status?.name || "";
              const isClosed = item.content.state === "CLOSED";

              let hasStart = false;
              let hasEnd = false;

              // 기존 필드 값들을 확인합니다.
              for (const fv of item.fieldValues.nodes) {
                if (fv.field?.name === startDateField && fv.date) hasStart = true;
                if (fv.field?.name === endDateField && fv.date) hasEnd = true;
              }

              // 시작일 설정
              if (status === "In Progress" && !hasStart) {
                console.log(`⏱️ 이슈 #${issueNumber}에 시작일(${today})을 설정합니다.`);
                await github.graphql(gql`
                  mutation {
                    updateProjectV2ItemFieldValue(
                      input: {
                        projectId: "${projectId}",
                        itemId: "${item.id}",
                        fieldId: "${startField.id}",
                        value: { date: "${today}" }
                      }
                    ) {
                      projectV2Item {
                        id
                      }
                    }
                  }
                `);
              }

              // 종료일 설정
              if ((status === "Done" || isClosed) && !hasEnd) {
                console.log(`✅ 이슈 #${issueNumber}에 종료일(${today})을 설정합니다.`);
                await github.graphql(gql`
                  mutation {
                    updateProjectV2ItemFieldValue(
                      input: {
                        projectId: "${projectId}",
                        itemId: "${item.id}",
                        fieldId: "${endField.id}",
                        value: { date: "${today}" }
                      }
                    ) {
                      projectV2Item {
                        id
                      }
                    }
                  }
                `);
              }
            }
